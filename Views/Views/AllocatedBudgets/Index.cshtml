@model PagedList.IPagedList<Alliance_for_Life.Models.AllocatedBudget>
@using PagedList.Mvc;
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />

@{
    ViewBag.Title = "Allocation Analysis Reports";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2 style="color:green; text-align:center;">@ViewBag.ReportTitle</h2>
<hr />

<div class="container-fluid">
    <form>
        @using (Html.BeginForm())
        {
            <br />
            <div class="container-fluid" style="padding-left: 15px;">
                <div class="row">
                    <div class="col-xs-5th-1 col-sm-6">
                        @*Select Fiscal Year:   @Html.DropDownList("Year", null, "Select Year", htmlAttributes: new { @class = "form-control", onchange = "this.form.submit()" })*@
                        Select Fiscal Year: @Html.TextBox("Year", null, htmlAttributes: new { placeholder = "Select Year", @class = "form-control", onchange = "this.form.submit()", name = "Year" })
                    </div>
                </div>
            </div>
        }
    </form>
</div>

<br />
<p style="color:red; text-align:center;">
    @ViewBag.error
</p>
@using (Html.BeginForm(FormMethod.Post))
{
    <table id="dtBasicExample" class="table table-striped table-bordered table-sm" style="font-size:16px" cellspacing="0" width="100">
        <tr>
        <thead>
            <tr style="font-size:13px; text-align:center;background-color:#c3e1f7;">
                <th></th>
                <th class="th-sm">
                    EIN
                </th>
                <th class="th-sm">
                    @Html.ActionLink("Organization", "Index", new { sortOrder = ViewBag.NameSortParm })
                </th>
                <th class="th-sm">
                    @Html.DisplayName("July Biling")
                </th>
                <th class="th-sm">
                    @Html.DisplayName("August Biling")
                </th>
                <th class="th-sm">
                    @Html.DisplayName("September Biling")
                </th>
                <th class="th-sm">
                    @Html.DisplayName("October Biling")
                </th>
                <th class="th-sm">
                    @Html.DisplayName("November Biling")
                </th>
                <th class="th-sm">
                    @Html.DisplayName("December Biling")
                </th>
                <th class="th-sm">
                    @Html.DisplayName("January Biling")
                </th>
                <th class="th-sm">
                    @Html.DisplayName("February Biling")
                </th>
                <th class="th-sm">
                    @Html.DisplayName("March Biling")
                </th>
                <th class="th-sm">
                    @Html.DisplayName("April Biling")
                </th>
                <th class="th-sm">
                    @Html.DisplayName("May Biling")
                </th>
                <th class="th-sm">
                    @Html.DisplayName("June Biling")
                </th>
                <th class="th-sm">
                    @Html.DisplayName("Total Biling")
                </th>
                <th class="th-sm">
                    @Html.DisplayName("Allocations")
                </th>
                <th class="th-sm">
                    @Html.DisplayName("Original Allocation")
                </th>
                <th class="th-sm">
                    @Html.DisplayName("Left to Spend")
                </th>
                <th class="th-sm">
                    @Html.DisplayName("Allocation Adjustments")
                </th>
                <th class="th-sm">
                    @Html.DisplayName("Monthly Average")
                </th>

            </tr>
        </thead>
        <tbody>

            @foreach (var group in Model.GroupBy(item => item.Subcontractor.OrgName))
            {
                <tr style="font-size:14px; text-align:center;">
                    <td>
                        @Html.ActionLink("Edit", "Edit", new { id = group.OrderByDescending(x => x.AllocationAdjustedDate).FirstOrDefault().AllocatedBudgetId })
                    </td>
                    <td>
                        @Html.Encode(group.FirstOrDefault().Subcontractor.EIN)
                    </td>
                    <td>
                        @Html.Label(group.Key)
                    </td>
                    <td>
                        @foreach (var item in group)
                        {
                            if (item.Invoice.Where(x => x.Year == ViewBag.yearselected - 1 && x.Month == Alliance_for_Life.Models.Months.July).Select(a => a.Month).Contains(Alliance_for_Life.Models.Months.July))
                            {
                                @item.Invoice.Where(a => a.Month == Alliance_for_Life.Models.Months.July && a.Year == ViewBag.yearselected - 1).Select(a => a.GrandTotal).SingleOrDefault().ToString("C");
                            }
                        }
                    </td>
                    <td>
                        @foreach (var item in group)
                        {
                            if (item.Invoice.Where(x => x.Year == ViewBag.yearselected - 1 && x.Month == Alliance_for_Life.Models.Months.August).Select(a => a.Month).Contains(Alliance_for_Life.Models.Months.August))
                            {
                                @item.Invoice.Where(a => a.Month == Alliance_for_Life.Models.Months.August && a.Year == ViewBag.yearselected - 1).Select(a => a.GrandTotal).SingleOrDefault().ToString("C")

                            }

                        }
                    </td>
                    <td>
                        @foreach (var item in group)
                        {
                            if (item.Invoice.Where(x => x.Year == ViewBag.yearselected - 1 && x.Month == Alliance_for_Life.Models.Months.September).Select(a => a.Month).Contains(Alliance_for_Life.Models.Months.September))
                            {
                                @item.Invoice.Where(a => a.Month == Alliance_for_Life.Models.Months.September && a.Year == ViewBag.yearselected - 1).Select(a => a.GrandTotal).SingleOrDefault().ToString("C")
                            }
                        }
                    </td>
                    <td>
                        @foreach (var item in group)
                        {
                            if (item.Invoice.Where(x => x.Year == ViewBag.yearselected - 1 && x.Month == Alliance_for_Life.Models.Months.October).Select(a => a.Month).Contains(Alliance_for_Life.Models.Months.October))
                            {

                                @item.Invoice.Where(a => a.Month == Alliance_for_Life.Models.Months.October && a.Year == ViewBag.yearselected - 1).Select(a => a.GrandTotal).SingleOrDefault().ToString("C")
                            }
                        }
                    </td>
                    <td>
                        @foreach (var item in group)
                        {
                            if (item.Invoice.Where(x => x.Year == ViewBag.yearselected - 1 && x.Month == Alliance_for_Life.Models.Months.November).Select(a => a.Month).Contains(Alliance_for_Life.Models.Months.November))
                            {
                                @item.Invoice.Where(a => a.Month == Alliance_for_Life.Models.Months.November && a.Year == ViewBag.yearselected - 1).Select(a => a.GrandTotal).SingleOrDefault().ToString("C")
                            }
                        }
                    </td>
                    <td>
                        @foreach (var item in group)
                        {
                            if (item.Invoice.Where(x => x.Year == ViewBag.yearselected - 1 && x.Month == Alliance_for_Life.Models.Months.December).Select(a => a.Month).Contains(Alliance_for_Life.Models.Months.December))
                            {

                                @item.Invoice.Where(a => a.Month == Alliance_for_Life.Models.Months.December && a.Year == ViewBag.yearselected - 1).Select(a => a.GrandTotal).SingleOrDefault().ToString("C")
                            }
                        }
                    </td>
                    <td>
                        @foreach (var item in group)
                        {
                            if (item.Invoice.Where(x => x.Year == ViewBag.yearselected && x.Month == Alliance_for_Life.Models.Months.January).Select(a => a.Month).Contains(Alliance_for_Life.Models.Months.January))
                            {

                                @item.Invoice.Where(a => a.Month == Alliance_for_Life.Models.Months.January && a.Year == ViewBag.yearselected).Select(a => a.GrandTotal).SingleOrDefault().ToString("C")
                            }
                        }
                    </td>

                    <td>
                        @foreach (var item in group)
                        {
                            if (item.Invoice.Where(x => x.Year == ViewBag.yearselected && x.Month == Alliance_for_Life.Models.Months.February).Select(a => a.Month).Contains(Alliance_for_Life.Models.Months.February))
                            {
                                @item.Invoice.Where(a => a.Month == Alliance_for_Life.Models.Months.February && a.Year == ViewBag.yearselected).Select(a => a.GrandTotal).FirstOrDefault().ToString("C")
                            }
                        }
                    </td>

                    <td>
                        @foreach (var item in group)
                        {
                            if (item.Invoice.Where(x => x.Year == ViewBag.yearselected && x.Month == Alliance_for_Life.Models.Months.March).Select(a => a.Month).Contains(Alliance_for_Life.Models.Months.March))
                            {

                                @item.Invoice.Where(a => a.Month == Alliance_for_Life.Models.Months.March && a.Year == ViewBag.yearselected).Select(a => a.GrandTotal).SingleOrDefault().ToString("C")
                            }
                        }
                    </td>

                    <td>
                        @foreach (var item in group)
                        {
                            if (item.Invoice.Where(x => x.Year == ViewBag.yearselected && x.Month == Alliance_for_Life.Models.Months.April).Select(a => a.Month).Contains(Alliance_for_Life.Models.Months.April))
                            {

                                @item.Invoice.Where(a => a.Month == Alliance_for_Life.Models.Months.April && a.Year == ViewBag.yearselected).Select(a => a.GrandTotal).SingleOrDefault().ToString("C")
                            }
                        }
                    </td>
                    <td>
                        @foreach (var item in group)
                        {
                            if (item.Invoice.Where(x => x.Year == ViewBag.yearselected && x.Month == Alliance_for_Life.Models.Months.May).Select(a => a.Month).Contains(Alliance_for_Life.Models.Months.May))
                            {
                                @item.Invoice.Where(a => a.Month == Alliance_for_Life.Models.Months.May && a.Year == ViewBag.yearselected).Select(a => a.GrandTotal).SingleOrDefault().ToString("C")
                            }
                        }
                    </td>
                    <td>
                        @foreach (var item in group)
                        {
                            if (item.Invoice.Where(x => x.Year == ViewBag.yearselected && x.Month == Alliance_for_Life.Models.Months.June).Select(a => a.Month).Contains(Alliance_for_Life.Models.Months.June))
                            {

                                @item.Invoice.Where(a => a.Month == Alliance_for_Life.Models.Months.June && a.Year == ViewBag.yearselected).Select(a => a.GrandTotal).SingleOrDefault().ToString("C")
                            }
                        }
                    </td>
                    <td>
                        @Math.Round(group.Sum(a => a.Invoice.Where(c => c.Month <= (Alliance_for_Life.Models.Months)6 && c.Year == ViewBag.yearselected - 1).Sum(b => b.GrandTotal)) +
             group.Sum(a => a.Invoice.Where(c => c.Month >= (Alliance_for_Life.Models.Months)7 && c.Year == ViewBag.yearselected).Sum(b => b.GrandTotal)), 2).ToString("c")
                    </td>
                    <td>
                        @Math.Round((group.OrderByDescending(x => x.AllocationAdjustedDate).FirstOrDefault().AllocatedOldBudget + (group.OrderByDescending(x => x.AllocationAdjustedDate).FirstOrDefault().AllocatedNewBudget)), 2).ToString("C")
                    </td>
                    <td>
                        @Html.Encode(group.OrderByDescending(x => x.AllocationAdjustedDate).FirstOrDefault().AllocatedOldBudget.ToString("C"))
                    </td>
                    <td>
                        @Math.Round(group.OrderByDescending(x => x.AllocationAdjustedDate).FirstOrDefault().AllocatedOldBudget + group.OrderByDescending(x => x.AllocationAdjustedDate).FirstOrDefault().AllocatedNewBudget - group.Sum(a => a.Invoice.Where(c => c.Month <= (Alliance_for_Life.Models.Months)6 && c.Year == ViewBag.yearselected - 1).Sum(b => b.GrandTotal)) -
             group.Sum(a => a.Invoice.Where(c => c.Month >= (Alliance_for_Life.Models.Months)7 && c.Year == ViewBag.yearselected).Sum(b => b.GrandTotal)), 3).ToString("c")

                    </td>

                    @if ((group.OrderByDescending(x => x.AllocationAdjustedDate).FirstOrDefault().AllocatedNewBudget) >= 0)
                    {
                        <td>
                            @Html.Encode(group.OrderByDescending(x => x.AllocationAdjustedDate).FirstOrDefault().AllocatedNewBudget.ToString("C"))
                        </td>
                    }
                    else
                    {
                        <td style="color:red;">
                            @if (group.OrderByDescending(x => x.AllocationAdjustedDate).FirstOrDefault().AllocatedNewBudget <= 0)
                            {
                                @Html.Encode(group.OrderByDescending(x => x.AllocationAdjustedDate).FirstOrDefault().AllocatedNewBudget.ToString("C"))
                            }
                        </td>
                    }

                    <td>
                        @Math.Round((group.Sum(a => a.Invoice.Where(c => c.Month <= (Alliance_for_Life.Models.Months)6 && c.Year == ViewBag.yearselected - 1).Sum(b => b.GrandTotal) / 12) +
             group.Sum(a => a.Invoice.Where(c => c.Month >= (Alliance_for_Life.Models.Months)7 && c.Year == ViewBag.yearselected).Sum(b => b.GrandTotal)) / 12), 3).ToString("c")
                    </td>
                    @*<td>
                            @Html.Encode(group.FirstOrDefault().CycleEndAdjustments.ToString("C"))
                        </td>*@
                    @*<td>
                                   @Math.Round((group.FirstOrDefault().AllocatedOldBudget + group.FirstOrDefault().AllocatedNewBudget - (group.Sum(a => a.Invoice.Where(c => c.Month <= (Alliance_for_Life.Models.Months)6 && c.Year == ViewBag.yearselected).Sum(b => b.GrandTotal)) +
                        group.Sum(a => a.Invoice.Where(c => c.Month >= (Alliance_for_Life.Models.Months)7 && c.Year == ViewBag.yearselected + 1).Sum(b => b.GrandTotal))) - group.FirstOrDefault().CycleEndAdjustments), 3).ToString("C")

                               </td>*@
                </tr>
            }
            <tr style="font-size:14px; text-align:center; background-color:yellowgreen">
                <th></th>
                <th>
                    Totals:
                </th>
                <td></td>
                <td>
                    @Model.Sum(a => a.Invoice.Where(m => m.Month == Alliance_for_Life.Models.Months.July && m.Year == ViewBag.yearselected - 1).Sum(b => b.GrandTotal)).ToString("C")
                <td>
                    @Model.Sum(a => a.Invoice.Where(m => m.Month == Alliance_for_Life.Models.Months.August && m.Year == ViewBag.yearselected - 1).Sum(b => b.GrandTotal)).ToString("C")
                </td>
                <td>
                    @Model.Sum(a => a.Invoice.Where(m => m.Month == Alliance_for_Life.Models.Months.September && m.Year == ViewBag.yearselected - 1).Sum(b => b.GrandTotal)).ToString("C")
                </td>
                <td>
                    @Model.Sum(a => a.Invoice.Where(m => m.Month == Alliance_for_Life.Models.Months.October && m.Year == ViewBag.yearselected - 1).Sum(b => b.GrandTotal)).ToString("C")
                </td>
                <td>
                    @Model.Sum(a => a.Invoice.Where(m => m.Month == Alliance_for_Life.Models.Months.November && m.Year == ViewBag.yearselected - 1).Sum(b => b.GrandTotal)).ToString("C")
                </td>
                <td>
                    @Model.Sum(a => a.Invoice.Where(m => m.Month == Alliance_for_Life.Models.Months.December && m.Year == ViewBag.yearselected - 1).Sum(b => b.GrandTotal)).ToString("C")
                </td>
                <td>
                    @Model.Sum(a => a.Invoice.Where(m => m.Month == Alliance_for_Life.Models.Months.January && m.Year == ViewBag.yearselected).Sum(b => b.GrandTotal)).ToString("C")
                </td>
                <td>
                    @Model.Sum(a => a.Invoice.Where(m => m.Month == Alliance_for_Life.Models.Months.February && m.Year == ViewBag.yearselected).Sum(b => b.GrandTotal)).ToString("C")
                </td>
                <td>
                    @Model.Sum(a => a.Invoice.Where(m => m.Month == Alliance_for_Life.Models.Months.March && m.Year == ViewBag.yearselected).Sum(b => b.GrandTotal)).ToString("C")
                </td>
                <td>
                    @Model.Sum(a => a.Invoice.Where(m => m.Month == Alliance_for_Life.Models.Months.April && m.Year == ViewBag.yearselected).Sum(b => b.GrandTotal)).ToString("C")
                </td>
                <td>
                    @Model.Sum(a => a.Invoice.Where(m => m.Month == Alliance_for_Life.Models.Months.May && m.Year == ViewBag.yearselected).Sum(b => b.GrandTotal)).ToString("C")
                </td>
                <td>
                    @Model.Sum(a => a.Invoice.Where(m => m.Month == Alliance_for_Life.Models.Months.June && m.Year == ViewBag.yearselected).Sum(b => b.GrandTotal)).ToString("C")
                </td>
                <td>
                    @Math.Round(Model.Sum(a => a.Invoice.Sum(b => b.GrandTotal)), 2).ToString("C")
                </td>
                <td>
                    @Math.Round(Model.Sum(a => a.AllocatedOldBudget) + Model.Sum(b => b.AllocatedNewBudget), 2).ToString("C")
                </td>
                <td>
                    @Math.Round(Model.Sum(a => a.AllocatedOldBudget), 2).ToString("C")
                </td>
                <td>
                    @Math.Round(Model.Sum(a => a.AllocatedOldBudget) + Model.Sum(b => b.AllocatedNewBudget) - Model.Sum(a => a.Invoice.Sum(b => b.GrandTotal)), 2).ToString("C")
                </td>

                @if (Model.Sum(a => a.AllocatedNewBudget) >= 0)
                {
                    <td>
                        @Math.Round(Model.Sum(a => a.AllocatedNewBudget), 2).ToString("C")
                    </td>
                }
                else
                {
                    <td style="color: red;">
                        @Math.Round(Model.Sum(a => a.AllocatedNewBudget), 2).ToString("C")
                    </td>
                }
                <td>
                    @Math.Round(Model.Sum(a => a.Invoice.Sum(b => b.GrandTotal) / 12), 2).ToString("C")
                </td>
                @*<td>
                        @Math.Round(Model.Sum(a => a.CycleEndAdjustments), 2).ToString("C")
                    </td>
                    <td>
                        @Math.Round((Model.Sum(a => a.AllocatedOldBudget) + Model.Sum(b => b.AllocatedNewBudget) - Model.Sum(a => a.Invoice.Sum(b => b.GrandTotal)) - Model.Sum(a => a.CycleEndAdjustments)), 2).ToString("C")
                    </td>*@
            </tr>
        </tbody>
    </table>
}
<table id="dtBasicExample" class="table table-striped table-bordered table-sm" style="font-size:16px" cellspacing="0" width="100">
    <tr>
    <thead>
        <tr style="font-size:13px; text-align:center;">
            <th></th>
            <th class="th-sm" style="text-align:center;">
                @Html.DisplayName("First Quarter")
            </th>
            <th class="th-sm" style="text-align:center;">
                @Html.DisplayName("Second Quarter")
            </th>
            <th class="th-sm" style="text-align:center;">
                @Html.DisplayName("Third Quarter")
            </th>
            <th class="th-sm" style="text-align:center;">
                @Html.DisplayName("Fourth Quarter")
            </th>
            <th class="th-sm" style="text-align:center;">
                @Html.DisplayName("Total")
            </th>
        <tr />
        <tr style="font-size:13px; text-align:center;">

            <th class="th-sm">
                QER Totals:
            </th>
            <td>
                @ViewBag.FirstQuarter.ToString("C")

            </td>
            <td>
                @ViewBag.SecondQuarter.ToString("C")
            </td>
            <td>
                @ViewBag.ThirdQuarter.ToString("C")
            </td>
            <td>
                @ViewBag.FourthQuarter.ToString("C")
            </td>
            <td>
                @ViewBag.QuarterTotals.ToString("C")
            </td>
        <tr />
    </thead>
</table>
<div class="container-fluid">
    <form>
        @using (Html.BeginForm())
        {
            <br />
            <div class="container-fluid">
                <div class="row">
                    <div class="col-sm-2">
                        Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

                        @Html.PagedListPager(Model, page => Url.Action("Index",
                            new { Year = ViewBag.Yr, page, pgSize = ViewBag.psize }))
                    </div>
                </div>
            </div>
        }
    </form>
</div>

<link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.2.0/css/datepicker.min.css" rel="stylesheet">

@section Scripts {

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.2.0/js/bootstrap-datepicker.min.js"></script>
    <script>
        var dp = $("#Year").datepicker({
            format: "yyyy",
            startView: "years",
            minViewMode: "years"
        });
    </script>
}

