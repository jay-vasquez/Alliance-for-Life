@model IEnumerable<Alliance_for_Life.Models.AllocatedBudget>

@{
    ViewBag.Title = "Allocated Budgets";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<<<<<<< HEAD
    <h2 style="color:green; text-align:center;">@ViewBag.ReportTitle</h2>

<div class="container">
    <form>
        @using (Html.BeginForm())
        {
            <br />
            <div class="container">
                <div class="row">
                    <div class="col-xs-5th-1 col-sm-6">
                        @Html.DropDownList("Year", null, "Select Year", htmlAttributes: new { @class = "form-control", onchange = "this.form.submit()" })
                    </div>
                    <div class="col-xs-5th-1 col-sm-6" style="align-content:center;">
                        Select Page:
                        @Html.DropDownList("pgSize", new SelectList(new[] { 10, 20, 30, 40, 50 }), htmlAttributes: new { @class = "", onchange = "this.form.submit()" })
                    </div>
                </div>
            </div>
        }
    </form>
</div>

<br />
<p style="color:red; text-align:center;">
    @ViewBag.error
</p>
<table id="dtBasicExample" class="table table-striped table-bordered table-sm" cellspacing="0" width="100">
    <tr>
    <thead>
        <tr style="font-size:15px; text-align:center;">
            <th class="th-sm">
                @Html.DisplayNameFor(model => model.Subcontractor.EIN)
            </th>
            <th class="th-sm">
                @Html.ActionLink("Organization", "Index", new { sortOrder = ViewBag.NameSortParm })
            </th>
            <th class="th-sm">
                @Html.DisplayName("July Biling")
            </th>
            <th class="th-sm">
                @Html.DisplayName("August Biling")
            </th>
            <th class="th-sm">
                @Html.DisplayName("September Biling")
            </th>
            <th class="th-sm">
                @Html.DisplayName("October Biling")
            </th>
            <th class="th-sm">
                @Html.DisplayName("November Biling")

            </th>
            <th class="th-sm">
                @Html.DisplayName("December Biling")
            </th>
            <th class="th-sm">
                @Html.DisplayName("January Biling")
            </th>
            <th class="th-sm">
                @Html.DisplayName("February Biling")
            </th>
            <th class="th-sm">
                @Html.DisplayName("March Biling")
            </th>
            <th class="th-sm">
                @Html.DisplayName("April Biling")
            </th>
            <th class="th-sm">
                @Html.DisplayName("May Biling")
            </th>
            <th class="th-sm">
                @Html.DisplayName("June Biling")
            </th>
            <th class="th-sm">
                @Html.DisplayName("Total Biling")
            </th>

            <th class="th-sm">
                @Html.DisplayName("Allocations")
            </th>
            <th class="th-sm">
                @Html.DisplayName("Original Allocation")
            </th>
            <th class="th-sm">
                @Html.DisplayName("Left to Spend")
            </th>
            <th class="th-sm">
                @Html.DisplayName("Additional Allocation")
            </th>
            <th class="th-sm" style="color:red;">
                @Html.DisplayName("Allocation Reduced")
            </th>
            <th class="th-sm">
                @Html.DisplayName("Monthly Average")
            </th>
            <th class="th-sm">
                @ViewBag.yearselected  Cycle End Adjustment
            </th>
            <th class="th-sm"> Final Check Amount</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var group in Model.GroupBy(item => item.Subcontractor.OrgName))
        {
        <tr style="font-size:14px; text-align:center;">

=======
<h2>@ViewBag.Title</h2>

<table class="table">
    <tr>
        <th></th>
        <th>
            @Html.DisplayNameFor(model => model.Subcontractor.OrgName)
        </th>
        <th>
            @Html.DisplayName("July Biling")
        </th>
        <th>
            @Html.DisplayName("August Biling")
        </th>
        <th>
            @Html.DisplayName("September Biling")
        </th>
        <th>
            @Html.DisplayName("October Biling")
        </th>
        <th>
            @Html.DisplayName("November Biling")

        </th>
        <th>
            @Html.DisplayName("December Biling")
        </th>
        <th>
            @Html.DisplayName("January Biling")
        </th>
        <th>
            @Html.DisplayName("February Biling")
        </th>
        <th>
            @Html.DisplayName("March Biling")
        </th>
        <th>
            @Html.DisplayName("April Biling")
        </th>
        <th>
            @Html.DisplayName("May Biling")
        </th>
        <th>
            @Html.DisplayName("June Biling")
        </th>
        <th>
           Cycle End Adjustments
        </th>
        <th>
            Allocation Adjustments
        </th>
        <th>
            Begining Allocated Amount
        </th>
        <th>
            Adjustment Date
        </th>

        <th></th>
    </tr>

    @foreach (var group in Model.GroupBy(item => item.Subcontractor.OrgName))
    {
        <tr>
>>>>>>> 12d2111aeb2c2393de0c2572e358c4bf75354b17
            <td>
                @*@Html.ActionLink("Details", "Details", new { group = Model.AllocatedBudgetId })*@
            </td>
            <td>
                @Html.Encode(group.Key)
            </td>
            <td>

                @foreach (var item in group)
                {
                    if (item.Invoice.Select(a => a.Month).Contains(Alliance_for_Life.Models.Months.July))
                    {

                        @item.Invoice.Where(a => a.Month == Alliance_for_Life.Models.Months.July).Select(a => a.GrandTotal).SingleOrDefault().ToString("C")
                    }
                }
            </td>
            <td>
                @foreach (var item in group)
                {
                    if (item.Invoice.Select(a => a.Month).Contains(Alliance_for_Life.Models.Months.August))
                    {
                        @item.Invoice.Where(a => a.Month == Alliance_for_Life.Models.Months.August).Select(a => a.GrandTotal).SingleOrDefault().ToString("C")

                    }

                }
            </td>
            <td>
                @foreach (var item in group)
                {
                    if (item.Invoice.Select(a => a.Month).Contains(Alliance_for_Life.Models.Months.September))
                    {
                        @item.Invoice.Where(a => a.Month == Alliance_for_Life.Models.Months.September).Select(a => a.GrandTotal).SingleOrDefault().ToString("C")
                    }
                }
            </td>
            <td>
                @foreach (var item in group)
                {
                    if (item.Invoice.Select(a => a.Month).Contains(Alliance_for_Life.Models.Months.October))
                    {

                        @item.Invoice.Where(a => a.Month == Alliance_for_Life.Models.Months.October).Select(a => a.GrandTotal).SingleOrDefault().ToString("C")
                    }
                }
            </td>
            <td>
                @foreach (var item in group)
                {
                    if (item.Invoice.Select(a => a.Month).Contains(Alliance_for_Life.Models.Months.November))
                    {
                        @item.Invoice.Where(a => a.Month == Alliance_for_Life.Models.Months.November).Select(a => a.GrandTotal).SingleOrDefault().ToString("C")
                    }
                }
            </td>
            <td>
                @foreach (var item in group)
                {
                    if (item.Invoice.Select(a => a.Month).Contains(Alliance_for_Life.Models.Months.December))
                    {

                        @item.Invoice.Where(a => a.Month == Alliance_for_Life.Models.Months.December).Select(a => a.GrandTotal).SingleOrDefault().ToString("C")
                    }
                }
            </td>
            <td>
                @foreach (var item in group)
                {
                    if (item.Invoice.Select(a => a.Month).Contains(Alliance_for_Life.Models.Months.January))
                    {

                        @item.Invoice.Where(a => a.Month == Alliance_for_Life.Models.Months.January).Select(a => a.GrandTotal).SingleOrDefault().ToString("C")
                    }
                }
            </td>

            <td>
                @foreach (var item in group)
                {
                    if (item.Invoice.Select(a => a.Month).Contains(Alliance_for_Life.Models.Months.February))
                    {

                        @item.Invoice.Where(a => a.Month == Alliance_for_Life.Models.Months.February).Select(a => a.GrandTotal).SingleOrDefault().ToString("C")
                    }
                }
            </td>

            <td>
                @foreach (var item in group)
                {
                    if (item.Invoice.Select(a => a.Month).Contains(Alliance_for_Life.Models.Months.March))
                    {

                        @item.Invoice.Where(a => a.Month == Alliance_for_Life.Models.Months.March).Select(a => a.GrandTotal).SingleOrDefault().ToString("C")
                    }
                }
            </td>

            <td>
                @foreach (var item in group)
                {
                    if (item.Invoice.Select(a => a.Month).Contains(Alliance_for_Life.Models.Months.April))
                    {

                        @item.Invoice.Where(a => a.Month == Alliance_for_Life.Models.Months.April).Select(a => a.GrandTotal).SingleOrDefault().ToString("C")
                    }
                }
            </td>
            <td>
                @foreach (var item in group)
                {
                    if (item.Invoice.Select(a => a.Month).Contains(Alliance_for_Life.Models.Months.May))
                    {
                        @item.Invoice.Where(a => a.Month == Alliance_for_Life.Models.Months.May).Select(a => a.GrandTotal).SingleOrDefault().ToString("C")
                    }
                }
            </td>
            <td>
                @foreach (var item in group)
                {
                    if (item.Invoice.Select(a => a.Month).Contains(Alliance_for_Life.Models.Months.June))
                    {

                        @item.Invoice.Where(a => a.Month == Alliance_for_Life.Models.Months.June).Select(a => a.GrandTotal).SingleOrDefault().ToString("C")
                    }
                }
            </td>
            <td>

                @group.Sum(a => a.Invoice.Sum(b => b.GrandTotal)).ToString("C")

            </td>
            <td>
                @Html.Encode(group.FirstOrDefault().AllocatedNewBudget.ToString("C"))
            </td>
            <td>
                @Html.Encode(group.FirstOrDefault().AllocatedOldBudget.ToString("C"))
            </td>
            <td>
                @Math.Round(group.FirstOrDefault().AllocatedNewBudget - group.Sum(a => a.Invoice.Sum(b => b.GrandTotal))  ).ToString("C")
              
            </td>
            <td>
                @if ((group.FirstOrDefault().AllocatedOldBudget) >= (group.FirstOrDefault().AllocatedNewBudget))
                {
                    @Math.Round(group.FirstOrDefault().AllocatedOldBudget - group.FirstOrDefault().AllocatedNewBudget).ToString("C")
                }

            </td>
            <td style="color:red;">
                @if (group.FirstOrDefault().AllocatedNewBudget >= group.FirstOrDefault().AllocatedOldBudget)
                {
                    @Math.Round(group.FirstOrDefault().AllocatedNewBudget - group.FirstOrDefault().AllocatedOldBudget).ToString("C")
                }

            </td>

            <td>
                @group.Sum(a => a.Invoice.Sum(b => b.GrandTotal) / 12).ToString("C")
            </td>
            <td>
                @Html.Encode(group.FirstOrDefault().CycleEndAdjustments.ToString("C"))
            </td>
            <td>

            </td>
        </tr>
        }

    </tbody>
</table>
